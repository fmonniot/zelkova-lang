searchState.loadedDescShard("zelkova_lang", 0, "The Zelkova compiler\nAn interface is trim down version of a module.\nA module name represent\nA package name is composed of an author and project name …\nNot an error, but something I use until I get to …\nThe canonical representation of a zelkova programs is a …\nTake a parsed module file within the ecosystem and apply …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHome to the <code>Name</code> and <code>QualName</code> primitives\nThis module contains all the data types representing the …\nSimple shortcut to qualify a given name with this module’…\nThis module contains the type checker pass of the language\nExpression is an optimized version for checks and caches.\nA resolved module\nNon qualified name to its export type\nTuple in elm have size 2 or 3, so the third argument is …\nTuple in elm have size 2 or 3, so the third argument is …\nTransform a given <code>parser::Module</code> into a <code>canonical::Module</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOperator name to infix details\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nnew type over identifier names\nQualified name\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQualify the existing name with a module\nType constructor →\nA Declaration is a top-level block and is the basis for a …\nExposed represent the terms exposed/imported by a module.\nExposing represent whether an import (or export) expose …\nAn Expression\nA <code>FunBinding</code> is one of the (possibly multiple) function …\nRepresents the type signature of a particular function\n<code>Function</code> represent a function declaration in the source …\nA representation of the <code>import</code> declaration\nA literal\nThe match structure is composed of a serie of patterns and …\nA Module is the top-level structure for a source file.\nA pattern is the left handside of a pattern-match …\nPrivacy control how a custom type is exposed.\nTODO Use (p, p, maybe) or (vec) but not (p, p, vec)\nA part of a declared type. This is also used in type …\nUnion types are also called custom types in Elm\nType constructor\nType variable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSimplify the indentation manager for the parser by doing …\nThe name of the module being imported\nPrecedence rules the order in which part of the expression …\nModule providing a transformation from a textual source …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContext for the block containing the different matches of …\nContext for a branch in a case/of expression.\nContext for the expression a pattern matching will match on\nContext represent the kind of expression we are looking at.\nContext for a let expression\nContext for a top level declaration. Those can be module, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nRepresent a standard <code>Result</code> scoped to a <code>TokenizerError</code>\nRepresents the different part which constitute our source …\nRepresents an error during tokenization.\nThe type of error refered in <code>TokenizerError</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake a source code and return an iterator of <code>Spanned</code>\nThe raw byte index.\nA <code>Span</code> represents a section of the original source code\nA value <code>T</code> enriched with its starting and ending position …\nThe byte index in the original source code\nColumn is a 1-indexed value telling us where the character …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLine is a 1-indexed value telling us on which line the …\nreset the position to the beginning of a document\nThis method will panic when used on 16 bits platform or …\nA file database that can store multiple source files.\nAdd a file to the database, returning the handle that can …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the file corresponding to the given id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad a <code>SourceFile</code> from the file system\nCreate a new files database.\nuntyped term. In zelkova that would be the parsed source …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ninfer the type of the given term given known function …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")