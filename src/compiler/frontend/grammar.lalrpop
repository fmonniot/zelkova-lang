use crate::compiler::position::Position;
use crate::compiler::frontend::tokenizer::Token;
use crate::compiler::frontend::error::Error;
use crate::compiler::frontend::*;
use std::convert::TryFrom;

grammar;

extern {
    type Location = Position;
    type Error = Error;

    enum Token {
        // literals
        "lo_ident"   => Token::LowerIdentifier(<String>),
        "up_ident"   => Token::UpperIdentifier(<String>),
        "integer"    => Token::Integer { value: <i64> },
        "float"      => Token::Float { value: <f64> },
        "char"       => Token::Char { value: <char> },
        "true"       => Token::True,
        "false"      => Token::False,
        "op"         => Token::Operator(<String>),

        // layout
        "open block" => Token::OpenBlock,
        "close block" => Token::CloseBlock,
        
        // Symbol
        "("  => Token::LPar,
        ")"  => Token::RPar,
        ":"  => Token::Colon,
        "."  => Token::Dot,
        ".." => Token::DotDot,
        "="  => Token::Equal,
        ","  => Token::Comma,
        "->" => Token::Arrow,
        "|"  => Token::Pipe,
        "_"  => Token::Underscore,
        "-"  => Token::Minus,

        // keywords
        "module"   => Token::Module,
        "exposing" => Token::Exposing,
        "import"   => Token::Import,
        "as"       => Token::As,
        "type"     => Token::Type,
        "case"     => Token::Case,
        "of"       => Token::Of,
        "if"       => Token::If,
        "then"     => Token::Then,
        "else"     => Token::Else,
        "infix"    => Token::Infix,

        // soft keywords (authorized as identifier)
        "left"  => Token::Left,
        "right" => Token::Right,
        "non"   => Token::Non,
    }
}

// Building a macro which accumulate tokens of certain type
// which are separated by a comma
Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

Pipe<T>: Vec<T> = {
    <v:(<T> "|")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

// TODO We will need further distinction between qualified and non-qualified 
// identities. Some accept the qualified (e.g. variable in expression) while
// some don't (e.g. type variables).

VarIdent: Name = {
    // soft keywords are authorized identifier
    "left" => Name("left".to_string()),
    "right" => Name("right".to_string()),
    "non" => Name("non".to_string()),

    <"lo_ident"> => Name(<>),
};

QualVarIdent: Name = {
    <VarIdent> => <>,
    <i:"up_ident"> "." <n:QualVarIdent> => {
        n.qualify_with(i)
    }
}

TypeIdent: Name = {
    <"up_ident"> => Name(<>),
}

QualTypeIdent: Name = {
    <TypeIdent> => <>,
    <i:"up_ident"> "." <n:QualTypeIdent> => {
        n.qualify_with(i)
    }
}

Op: Name = {
    <"op"> => Name(<>),
    "-" => Name("-".to_string()),
}




// Expressions


Lit: Literal = {
    <"integer"> => Literal::Int(<>),
    <"float"> => Literal::Float(<>),
    <"char"> => Literal::Char(<>),
    "true" => Literal::Bool(true),
    "false" => Literal::Bool(false),
};

// Base expression
AtomicExpr: Expression = {
    <id: QualVarIdent> =>
        Expression::Variable(id),

    <lit: Lit> =>
        Expression::Lit(lit),

    // <expr: AtomicExpr> "." <id: Ident> =>
    //     Expression::Projection(Box::new(expr), id),
    // 

    "(" <elems: Comma<Expr>> ")" => {
        match elems.len() {
            // This isn't a tuple by a parenthesis around an expression
            1 => elems.first().unwrap().clone(),
            _ => Expression::Tuple(Box::new(elems))
        }
    },
    
    // "[" <elems: Comma<Expr>> "]" => 
    //     Expression::List { elems },

    // TODO record
};


// Applicative expression
AppExpr = {
    AtomicExpr,

    // Might be a bug here, as expr can be a lit, and, well, a literal
    // doesn't apply anything. or does it ?
    <expr: AppExpr> <arg: AtomicExpr> =>
        Expression::Application(Box::new(expr), Box::new(arg)),
};

InfixExpr = {
    AppExpr,

    // TODO LambdaExpr which take AppExpr as a branch and replace AppExpr in Expr

    <lhs: AppExpr> <op: Op> <rhs: InfixExpr> => {
        // TODO Might need a custom node here, to be able to establish
        // the correct application order in a next pass (once we have all
        // infix rules).
        Expression::Application(
            Box::new(Expression::Application(
                Box::new(Expression::Variable(op)),
                Box::new(lhs),
            )),
            Box::new(rhs),
        )
    }
}

Pattern: Pattern = {
    "_" => Pattern::Anything,

    <VarIdent> =>
        Pattern::Variable(<>),

    <Lit> =>
        Pattern::Literal(<>),

    "(" <mut elems: Comma<Pattern>> ")" => {
        match elems.len() {
            0 => todo!("Unit type"),
            1 => todo!("Parenthesis in pattern matching"),
            _ => {
                let first = elems.swap_remove(0);
                let second = elems.swap_remove(0);

                Pattern::Tuple(
                    Box::new(first),
                    Box::new(second),
                    elems
                )
            },
        }
    }
}

CaseBranch: CaseBranch = {
    <pattern: Pattern> "->" "open block" <expression: Expr> "close block" => CaseBranch {<>}
}


Expr = {
    InfixExpr,

    "-" <e: Expr> => {
        Expression::Application(
            Box::new(Expression::Application(
                Box::new(Expression::Variable(Name("-".to_string()))),
                Box::new(Expression::Lit(Literal::Int(0))),
            )),
            Box::new(e),
        )
    },

    "if" <pred: Expr> "then" <if_true: Expr> "else" <if_false: Expr> =>
        Expression::If(Box::new(pred),Box::new(if_true),Box::new(if_false)),

    // TODO let binding: type  (FunType)
    // TODO let binding: value (FunBinding)

    "case" "open block" <exp: Expr> "close block" "of" "open block" <branches: CaseBranch+> "close block" => {
        Expression::Case(Box::new(exp), branches)
    }
};

// Declarations

// TODO This is actually unqualified OR qualified, depending on the underlying name
// Let's change the function to take that into account
AtomicType: Type = {
    <QualTypeIdent> => Type::unqualified(<>),
    <VarIdent> => Type::Variable(<>),
}

ArgType: Type = {
    AtomicType,

    // Here IÂ need to think about this some more (and need better test coverage)
    <name: QualTypeIdent> <types: AtomicType+> => {
        Type::unqualified_with(name, types)
    },

}

Type: Type = {
    ArgType,

    // This support two kind of syntax:
    // 1. when the arrow is not present, we have a tuple/parenthesis group
    // 2. when an arrow is present, this is a call with precendence (parenthesis)
    "(" <mut elems: Comma<Type>> ")" <tpe2:("->" <Type>)?> => {
        let tpe1 = match elems.len() {
            0 => todo!("Unit type"),
            1 => elems.swap_remove(0),
            _ => {
                let head = elems.swap_remove(0);

                Type::Tuple(Box::new(head), Box::new(elems))
            },
        };

        match tpe2 {
            Some(tpe2) => Type::curry_arrow(tpe1, tpe2),
            None => tpe1,
        }
    },

    <name:ArgType> "->" <tpe:Type> => Type::curry_arrow(name, tpe),
}

FunType: FunType = <name:VarIdent> ":" <tpe:Type> => {
    FunType { name, tpe }
};

FunBinding: FunBinding = <name:VarIdent> <patterns: Pattern*> "=" <expr:Expr> => {
    FunBinding {
        name,
        pattern: Match {
            patterns,
            body: expr
        }
    }
};

Exposed: Exposed = {
    // TODO Most operators have explicit tokens, which might
    // or might not be a good thing after all.
    "(" <Op> ")" => Exposed::Operator(<>),

    <VarIdent> => Exposed::Lower(<>),
    <TypeIdent> => Exposed::Upper(<>, Privacy::Private),

    <TypeIdent> "(" ".." ")" => {
        Exposed::Upper(<>, Privacy::Public)
    },
};

Exposing: Exposing = {
    "(" ".." ")" => Exposing::Open,
    "(" <e: Comma<Exposed>> ")" => Exposing::Explicit(<>),
};

Import:Import = {
    "import" <name: QualTypeIdent> <alias: ("as" <TypeIdent>)?> <exposing: ("exposing" <Exposing>)?> => {
        let exposing = exposing.unwrap_or_else(|| Exposing::Explicit(vec![]));

        Import {
            name,
            alias,
            exposing,
        }
    }
}

Union: UnionType = {
    "type" <name: TypeIdent> <type_arguments: VarIdent*> "=" <variants: Pipe<Type>> => {
        UnionType {
            name,
            type_arguments,
            variants
        }
    },
}

Associativity: Associativity = {
    "left" => Associativity::Left,
    "right" => Associativity::Right,
    "non" => Associativity::None,
}

Infix: Infix = {
    "infix" <a:Associativity> <p:"integer"> "(" <o:Op> ")" "=" <n:VarIdent> => {
        // TODO don't panic once we have a way to collect errors
        let precedence = u8::try_from(p).unwrap();

        Infix {
            operator: o,
            associativy: a,
            precedence,
            function_name: n
        }
    }
}


Decl: Declaration = {
    "open block" <FunBinding> "close block" => Declaration::Function(<>),
    "open block" <FunType> "close block" => Declaration::FunctionType(<>),
    "open block" <Import> "close block" => Declaration::Import(<>),
    "open block" <Infix> "close block" => Declaration::Infix(<>),
    "open block" <Union> "close block" => Declaration::Union(<>),
};

// Module

// entry point for our parser, a source file always start by
// declaring the module
pub Module: Module = 
    "open block"
        "module" <name: TypeIdent> "exposing" <exposing:Exposing>
    "close block" <declarations:Decl*> => Module::from_declarations(<>);

// TODO Maybe something for the REPL. Might just be Decl.
