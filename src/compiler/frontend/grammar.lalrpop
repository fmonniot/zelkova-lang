use crate::compiler::position::Position;
use crate::compiler::frontend::tokenizer::Token;
use crate::compiler::frontend::error::Error;
use crate::compiler::frontend::*;

grammar;

extern {
    type Location = Position;
    type Error = Error;

    enum Token {
        // literals
        "identifier" => Token::Identifier{ name: <String>},
        "integer"    => Token::Integer { value: <i64> },
        "float"      => Token::Float { value: <f64> },
        "char"       => Token::Char { value: <char> },

        // layout
        "\n"   => Token::Newline,
        Indent => Token::Indent,
        Dedent => Token::Dedent,
        
        // Symbol
        "("  => Token::LPar,
        ")"  => Token::RPar,
        ":"  => Token::Colon,
        "."  => Token::Dot,
        ".." => Token::DotDot,
        "="  => Token::Equal,
        ","  => Token::Comma,
        "->" => Token::Arrow,
        "+"  => Token::Plus,
        "|"  => Token::Pipe,

        // keywords
        "module"   => Token::Module,
        "exposing" => Token::Exposing,
        "import"   => Token::Import,
        "as"       => Token::As,
        "type"     => Token::Type,
        "case"     => Token::Case,
        "of"       => Token::Of,
        "if"       => Token::If,
        "then"     => Token::Then,
        "else"     => Token::Else,
    }
}

// Building a macro which accumulate tokens of certain type
// which are separated by a comma
Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

Pipe<T>: Vec<T> = {
    <v:(<T> "|")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

Ident: Name = <"identifier"> => Name(<>);




// Expressions


Lit: Literal = {
    <"integer"> => Literal::Int(<>),
    <"float"> => Literal::Float(<>),
    <"char"> => Literal::Char(<>),
    // TODO boolean
};

InfixOp: Name = {
    "+" => Name("plus".to_string()),
}

// Base expression
AtomicExpr: Expression = {
    <id: Ident> =>
        Expression::Variable(id),

    <lit: Lit> =>
        Expression::Lit(lit),

    // <expr: AtomicExpr> "." <id: Ident> =>
    //     Expression::Projection(Box::new(expr), id),
    // 

    "(" <elems: Comma<Expr>> ")" => {
        match elems.len() {
            // This isn't a tuple by a parenthesis around an expression
            1 => elems.first().unwrap().clone(),
            _ => Expression::Tuple(Box::new(elems))
        }
    },
    
    // "[" <elems: CommaSlice<Expr>> "]" => 
    //     Expression::List { elems },

    // TODO record
};


// Applicative expression
AppExpr = {
    AtomicExpr,

    // Might be a bug here, as expr can be a lit, and, well, a literal
    // doesn't apply anything. or does it ?
    <expr: AppExpr> <arg: AtomicExpr> =>
        Expression::Application(Box::new(expr), Box::new(arg)),
};

InfixExpr = {
    AppExpr,

    // TODO LambdaExpr which take AppExpr as a branch and replace AppExpr in Expr

    <lhs: AppExpr> <op: InfixOp> <rhs: InfixExpr> => {
        Expression::Application(
            Box::new(Expression::Application(
                Box::new(Expression::Variable(op)),
                Box::new(lhs),
            )),
            Box::new(rhs),
        )
    }
}


Expr = {
    InfixExpr,

    "if" <pred: Expr> "then" <if_true: Expr> "else" <if_false: Expr> =>
        todo!(),

    // TODO let binding: type  (FunType)
    // TODO let binding: value (BindGroup)

    // TODO pattern matching
};

// Declarations

AtomicType: Type = {
    <name:Ident> => {
        if name.is_type() {
            Type::unqualified(name)
        } else {
            Type::Variable(name)
        }
    },
}

ArgType: Type = {
    AtomicType,

    <name: Ident> <types: AtomicType+> => {
        Type::unqualified_with(name, types)
    },

}

Type: Type = {
    ArgType,
    
    "(" <tpe1:Type> ")" "->" <tpe2:Type> => Type::curry_arrow(tpe1, tpe2),

    <name:ArgType> "->" <tpe:Type> => Type::curry_arrow(name, tpe),
}

// TODO Support function types (paired with pattern matching in bind groups)
FunType: FunType = <name:Ident> ":" <tpe:Type> => {
    FunType { name, tpe }
};

// TODO Pattern matching needs to be fleshed out :)
BindGroup: BindGroup = <name:Ident> "=" <expr:Expr> => {
    BindGroup {
        name,
        patterns: vec![
            Match {
                pattern: vec![],
                body: expr
            }
        ]
    }
};

Import:Import = {
    "import" <name: Ident> <alias: ("as" <Ident>)?> <exposing: ("exposing" <Exposing>)?> => {
        let exposing = exposing.unwrap_or_else(|| Exposing::Explicit(vec![]));

        Import {
            name,
            alias,
            exposing,
        }
    }
}

// Annoyingly here it could be double indent or not
// TODO Sort out the identation. It can be 2 or 4 spaces, as long as it is consistentâ€¦
// I'm of two mind here:
// - should we deviate from the elm implementation, at the risk of not being able to
//   compile the elm ecosystem if needs be (instead of duplicating)
// - or should we take on the complex task of changing how indentation is validated
//   in zelkova ?
Variant: Type = {
    "\n" "=" <Type> => <>,
    "\n" "|" <Type> => <>,
}

// The current encoding means we don't support multiline with one variant, like so:
// type A = \n Indent Constructor
Union: UnionType = {
    "type" <name: Ident> <type_arguments: Ident*> "=" <variants: Pipe<Type>> "\n" => {
        UnionType {
            name,
            type_arguments: vec![],
            variants
        }
    },
    "type" <name: Ident> <type_arguments: Ident*> <variants: Variant+> "\n" => {
        UnionType {
            name,
            type_arguments,
            variants
        }
    },
}


Decl: Option<Declaration> = {
    <BindGroup> "\n" => Some(Declaration::Function(<>)),
    <FunType> "\n" => Some(Declaration::FunctionType(<>)),
    <Import> "\n" => Some(Declaration::Import(<>)),
    <Union> => Some(Declaration::Union(<>)),
    "\n" => None,
};

// Module

Exposed: Exposed = {
    // TODO Most operators have explicit tokens, which might
    // or might not be a good thing after all.
    "(" <InfixOp> ")" => Exposed::Operator(<>),

    <i:Ident> => {
        if i.is_type() {
            Exposed::Upper(i, Privacy::Private)
        } else {
            Exposed::Lower(i)
        }
    },

    <i:Ident> "(" ".." ")" => {
        // TODO Restrict that to Ident with upper case first letter
        Exposed::Upper(i, Privacy::Public)
    },
};

Exposing: Exposing = {
    "(" ".." ")" => Exposing::Open,
    "(" <e: Comma<Exposed>> ")" => Exposing::Explicit(<>),
    "\n" Indent "(" <e1: Exposed> <e: ("\n" Indent "," <Comma<Exposed>>)*> "\n" Indent ")" => {
        let mut explicits = vec![e1];
        explicits.extend(e.into_iter().flatten());
        
        Exposing::Explicit(explicits)
    }
};

// entry point for our parser, a source file always start by
// declaring the module
pub Module: Module = "module" <name: Ident> "exposing" <exposing:Exposing> "\n" <decl:Decl*> => {
    Module {
        name,
        exposing,
        declarations: decl.into_iter().flatten().collect(),
    }
};

// TODO Maybe something for the REPL. Might just be Decl.
